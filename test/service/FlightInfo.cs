// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FlightInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Variflight.Fidstest.Flight {

  /// <summary>Holder for reflection information generated from FlightInfo.proto</summary>
  public static partial class FlightInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for FlightInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlightInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBGbGlnaHRJbmZvLnByb3RvEh5jb20udmFyaWZsaWdodC5maWRzdGVzdC5m",
            "bGlnaHQaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byKrBwoKRmxp",
            "Z2h0SW5mbxILCgNmaWQYASABKAkSEAoIaXNBcnJpdmUYAiABKAgSDAoEZl9u",
            "bxgDIAEoCRIOCgZmX2RhdGUYBCABKAMSKgoEYV9ubxgFIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRILCgNkZXAYBiABKAkSCwoDYXJyGAcg",
            "ASgJEgsKA3N0ZBgIIAEoAxILCgNzdGEYCSABKAMSKAoDZXRkGAogASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSKAoDZXRhGAsgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUSKAoDYXRkGAwgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSKAoDYXRhGA0gASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWUSLAoGZl9tb2RlGA4gASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEg8KB2FsX2lhdGEYDyABKAkSDwoHYWxfaWNh",
            "bxgQIAEoCRILCgNjbGEYESABKAkSEAoIZl9zdGF0dXMYEiABKAkSMAoKZGVs",
            "YXlfY29kZRgTIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIu",
            "CghkZWxheV9jbhgUIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZRItCgdzZmxpZ2h0GBUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlEisKBXN0YW5kGBYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlEioKBGdhdGUYFyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSKQoDY2FyGBggASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EikKA21wMRgZIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIp",
            "CgNjaWQYGiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKQoD",
            "Y2xkGBsgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEikKA2Nl",
            "YRgcIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJ2bBgd",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSIXCgdOb3RoaW5n",
            "EgwKBHRlc3QYASABKAkirAEKCkZsaWdodExpc3QSRAoFdmFsdWUYASADKAsy",
            "NS5jb20udmFyaWZsaWdodC5maWRzdGVzdC5mbGlnaHQuRmxpZ2h0TGlzdC5W",
            "YWx1ZUVudHJ5GlgKClZhbHVlRW50cnkSCwoDa2V5GAEgASgJEjkKBXZhbHVl",
            "GAIgASgLMiouY29tLnZhcmlmbGlnaHQuZmlkc3Rlc3QuZmxpZ2h0LkZsaWdo",
            "dEluZm86AjgBMtQBCg1GbGlnaHRTZXJ2aWNlEmUKDlB1bGxGbGlnaHRJbmZv",
            "EicuY29tLnZhcmlmbGlnaHQuZmlkc3Rlc3QuZmxpZ2h0Lk5vdGhpbmcaKi5j",
            "b20udmFyaWZsaWdodC5maWRzdGVzdC5mbGlnaHQuRmxpZ2h0TGlzdBJcCgZT",
            "dHJlYW0SJy5jb20udmFyaWZsaWdodC5maWRzdGVzdC5mbGlnaHQuTm90aGlu",
            "ZxonLmNvbS52YXJpZmxpZ2h0LmZpZHN0ZXN0LmZsaWdodC5Ob3RoaW5nMAFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Variflight.Fidstest.Flight.FlightInfo), global::Com.Variflight.Fidstest.Flight.FlightInfo.Parser, new[]{ "Fid", "IsArrive", "FNo", "FDate", "ANo", "Dep", "Arr", "Std", "Sta", "Etd", "Eta", "Atd", "Ata", "FMode", "AlIata", "AlIcao", "Cla", "FStatus", "DelayCode", "DelayCn", "Sflight", "Stand", "Gate", "Car", "Mp1", "Cid", "Cld", "Cea", "Vl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Variflight.Fidstest.Flight.Nothing), global::Com.Variflight.Fidstest.Flight.Nothing.Parser, new[]{ "Test" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Variflight.Fidstest.Flight.FlightList), global::Com.Variflight.Fidstest.Flight.FlightList.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FlightInfo : pb::IMessage<FlightInfo> {
    private static readonly pb::MessageParser<FlightInfo> _parser = new pb::MessageParser<FlightInfo>(() => new FlightInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Variflight.Fidstest.Flight.FlightInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightInfo(FlightInfo other) : this() {
      fid_ = other.fid_;
      isArrive_ = other.isArrive_;
      fNo_ = other.fNo_;
      fDate_ = other.fDate_;
      ANo = other.ANo;
      dep_ = other.dep_;
      arr_ = other.arr_;
      std_ = other.std_;
      sta_ = other.sta_;
      Etd = other.Etd;
      Eta = other.Eta;
      Atd = other.Atd;
      Ata = other.Ata;
      FMode = other.FMode;
      alIata_ = other.alIata_;
      alIcao_ = other.alIcao_;
      cla_ = other.cla_;
      fStatus_ = other.fStatus_;
      DelayCode = other.DelayCode;
      DelayCn = other.DelayCn;
      Sflight = other.Sflight;
      Stand = other.Stand;
      Gate = other.Gate;
      Car = other.Car;
      Mp1 = other.Mp1;
      Cid = other.Cid;
      Cld = other.Cld;
      Cea = other.Cea;
      Vl = other.Vl;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightInfo Clone() {
      return new FlightInfo(this);
    }

    /// <summary>Field number for the "fid" field.</summary>
    public const int FidFieldNumber = 1;
    private string fid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fid {
      get { return fid_; }
      set {
        fid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isArrive" field.</summary>
    public const int IsArriveFieldNumber = 2;
    private bool isArrive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArrive {
      get { return isArrive_; }
      set {
        isArrive_ = value;
      }
    }

    /// <summary>Field number for the "f_no" field.</summary>
    public const int FNoFieldNumber = 3;
    private string fNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FNo {
      get { return fNo_; }
      set {
        fNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_date" field.</summary>
    public const int FDateFieldNumber = 4;
    private long fDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FDate {
      get { return fDate_; }
      set {
        fDate_ = value;
      }
    }

    /// <summary>Field number for the "a_no" field.</summary>
    public const int ANoFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_aNo_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string aNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ANo {
      get { return aNo_; }
      set {
        aNo_ = value;
      }
    }


    /// <summary>Field number for the "dep" field.</summary>
    public const int DepFieldNumber = 6;
    private string dep_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dep {
      get { return dep_; }
      set {
        dep_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arr" field.</summary>
    public const int ArrFieldNumber = 7;
    private string arr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arr {
      get { return arr_; }
      set {
        arr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "std" field.</summary>
    public const int StdFieldNumber = 8;
    private long std_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Std {
      get { return std_; }
      set {
        std_ = value;
      }
    }

    /// <summary>Field number for the "sta" field.</summary>
    public const int StaFieldNumber = 9;
    private long sta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sta {
      get { return sta_; }
      set {
        sta_ = value;
      }
    }

    /// <summary>Field number for the "etd" field.</summary>
    public const int EtdFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_etd_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? etd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Etd {
      get { return etd_; }
      set {
        etd_ = value;
      }
    }


    /// <summary>Field number for the "eta" field.</summary>
    public const int EtaFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_eta_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? eta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Eta {
      get { return eta_; }
      set {
        eta_ = value;
      }
    }


    /// <summary>Field number for the "atd" field.</summary>
    public const int AtdFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_atd_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? atd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Atd {
      get { return atd_; }
      set {
        atd_ = value;
      }
    }


    /// <summary>Field number for the "ata" field.</summary>
    public const int AtaFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_ata_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? ata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Ata {
      get { return ata_; }
      set {
        ata_ = value;
      }
    }


    /// <summary>Field number for the "f_mode" field.</summary>
    public const int FModeFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _single_fMode_codec = pb::FieldCodec.ForClassWrapper<string>(114);
    private string fMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FMode {
      get { return fMode_; }
      set {
        fMode_ = value;
      }
    }


    /// <summary>Field number for the "al_iata" field.</summary>
    public const int AlIataFieldNumber = 15;
    private string alIata_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlIata {
      get { return alIata_; }
      set {
        alIata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "al_icao" field.</summary>
    public const int AlIcaoFieldNumber = 16;
    private string alIcao_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlIcao {
      get { return alIcao_; }
      set {
        alIcao_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cla" field.</summary>
    public const int ClaFieldNumber = 17;
    private string cla_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cla {
      get { return cla_; }
      set {
        cla_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_status" field.</summary>
    public const int FStatusFieldNumber = 18;
    private string fStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FStatus {
      get { return fStatus_; }
      set {
        fStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delay_code" field.</summary>
    public const int DelayCodeFieldNumber = 19;
    private static readonly pb::FieldCodec<string> _single_delayCode_codec = pb::FieldCodec.ForClassWrapper<string>(154);
    private string delayCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DelayCode {
      get { return delayCode_; }
      set {
        delayCode_ = value;
      }
    }


    /// <summary>Field number for the "delay_cn" field.</summary>
    public const int DelayCnFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _single_delayCn_codec = pb::FieldCodec.ForClassWrapper<string>(162);
    private string delayCn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DelayCn {
      get { return delayCn_; }
      set {
        delayCn_ = value;
      }
    }


    /// <summary>Field number for the "sflight" field.</summary>
    public const int SflightFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _single_sflight_codec = pb::FieldCodec.ForClassWrapper<string>(170);
    private string sflight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sflight {
      get { return sflight_; }
      set {
        sflight_ = value;
      }
    }


    /// <summary>Field number for the "stand" field.</summary>
    public const int StandFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _single_stand_codec = pb::FieldCodec.ForClassWrapper<string>(178);
    private string stand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stand {
      get { return stand_; }
      set {
        stand_ = value;
      }
    }


    /// <summary>Field number for the "gate" field.</summary>
    public const int GateFieldNumber = 23;
    private static readonly pb::FieldCodec<string> _single_gate_codec = pb::FieldCodec.ForClassWrapper<string>(186);
    private string gate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gate {
      get { return gate_; }
      set {
        gate_ = value;
      }
    }


    /// <summary>Field number for the "car" field.</summary>
    public const int CarFieldNumber = 24;
    private static readonly pb::FieldCodec<string> _single_car_codec = pb::FieldCodec.ForClassWrapper<string>(194);
    private string car_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Car {
      get { return car_; }
      set {
        car_ = value;
      }
    }


    /// <summary>Field number for the "mp1" field.</summary>
    public const int Mp1FieldNumber = 25;
    private static readonly pb::FieldCodec<string> _single_mp1_codec = pb::FieldCodec.ForClassWrapper<string>(202);
    private string mp1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mp1 {
      get { return mp1_; }
      set {
        mp1_ = value;
      }
    }


    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 26;
    private static readonly pb::FieldCodec<string> _single_cid_codec = pb::FieldCodec.ForClassWrapper<string>(210);
    private string cid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cid {
      get { return cid_; }
      set {
        cid_ = value;
      }
    }


    /// <summary>Field number for the "cld" field.</summary>
    public const int CldFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _single_cld_codec = pb::FieldCodec.ForClassWrapper<string>(218);
    private string cld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cld {
      get { return cld_; }
      set {
        cld_ = value;
      }
    }


    /// <summary>Field number for the "cea" field.</summary>
    public const int CeaFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _single_cea_codec = pb::FieldCodec.ForClassWrapper<string>(226);
    private string cea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cea {
      get { return cea_; }
      set {
        cea_ = value;
      }
    }


    /// <summary>Field number for the "vl" field.</summary>
    public const int VlFieldNumber = 29;
    private static readonly pb::FieldCodec<string> _single_vl_codec = pb::FieldCodec.ForClassWrapper<string>(234);
    private string vl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vl {
      get { return vl_; }
      set {
        vl_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fid != other.Fid) return false;
      if (IsArrive != other.IsArrive) return false;
      if (FNo != other.FNo) return false;
      if (FDate != other.FDate) return false;
      if (ANo != other.ANo) return false;
      if (Dep != other.Dep) return false;
      if (Arr != other.Arr) return false;
      if (Std != other.Std) return false;
      if (Sta != other.Sta) return false;
      if (Etd != other.Etd) return false;
      if (Eta != other.Eta) return false;
      if (Atd != other.Atd) return false;
      if (Ata != other.Ata) return false;
      if (FMode != other.FMode) return false;
      if (AlIata != other.AlIata) return false;
      if (AlIcao != other.AlIcao) return false;
      if (Cla != other.Cla) return false;
      if (FStatus != other.FStatus) return false;
      if (DelayCode != other.DelayCode) return false;
      if (DelayCn != other.DelayCn) return false;
      if (Sflight != other.Sflight) return false;
      if (Stand != other.Stand) return false;
      if (Gate != other.Gate) return false;
      if (Car != other.Car) return false;
      if (Mp1 != other.Mp1) return false;
      if (Cid != other.Cid) return false;
      if (Cld != other.Cld) return false;
      if (Cea != other.Cea) return false;
      if (Vl != other.Vl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fid.Length != 0) hash ^= Fid.GetHashCode();
      if (IsArrive != false) hash ^= IsArrive.GetHashCode();
      if (FNo.Length != 0) hash ^= FNo.GetHashCode();
      if (FDate != 0L) hash ^= FDate.GetHashCode();
      if (aNo_ != null) hash ^= ANo.GetHashCode();
      if (Dep.Length != 0) hash ^= Dep.GetHashCode();
      if (Arr.Length != 0) hash ^= Arr.GetHashCode();
      if (Std != 0L) hash ^= Std.GetHashCode();
      if (Sta != 0L) hash ^= Sta.GetHashCode();
      if (etd_ != null) hash ^= Etd.GetHashCode();
      if (eta_ != null) hash ^= Eta.GetHashCode();
      if (atd_ != null) hash ^= Atd.GetHashCode();
      if (ata_ != null) hash ^= Ata.GetHashCode();
      if (fMode_ != null) hash ^= FMode.GetHashCode();
      if (AlIata.Length != 0) hash ^= AlIata.GetHashCode();
      if (AlIcao.Length != 0) hash ^= AlIcao.GetHashCode();
      if (Cla.Length != 0) hash ^= Cla.GetHashCode();
      if (FStatus.Length != 0) hash ^= FStatus.GetHashCode();
      if (delayCode_ != null) hash ^= DelayCode.GetHashCode();
      if (delayCn_ != null) hash ^= DelayCn.GetHashCode();
      if (sflight_ != null) hash ^= Sflight.GetHashCode();
      if (stand_ != null) hash ^= Stand.GetHashCode();
      if (gate_ != null) hash ^= Gate.GetHashCode();
      if (car_ != null) hash ^= Car.GetHashCode();
      if (mp1_ != null) hash ^= Mp1.GetHashCode();
      if (cid_ != null) hash ^= Cid.GetHashCode();
      if (cld_ != null) hash ^= Cld.GetHashCode();
      if (cea_ != null) hash ^= Cea.GetHashCode();
      if (vl_ != null) hash ^= Vl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fid);
      }
      if (IsArrive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsArrive);
      }
      if (FNo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FNo);
      }
      if (FDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FDate);
      }
      if (aNo_ != null) {
        _single_aNo_codec.WriteTagAndValue(output, ANo);
      }
      if (Dep.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Dep);
      }
      if (Arr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Arr);
      }
      if (Std != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Std);
      }
      if (Sta != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Sta);
      }
      if (etd_ != null) {
        _single_etd_codec.WriteTagAndValue(output, Etd);
      }
      if (eta_ != null) {
        _single_eta_codec.WriteTagAndValue(output, Eta);
      }
      if (atd_ != null) {
        _single_atd_codec.WriteTagAndValue(output, Atd);
      }
      if (ata_ != null) {
        _single_ata_codec.WriteTagAndValue(output, Ata);
      }
      if (fMode_ != null) {
        _single_fMode_codec.WriteTagAndValue(output, FMode);
      }
      if (AlIata.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(AlIata);
      }
      if (AlIcao.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(AlIcao);
      }
      if (Cla.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Cla);
      }
      if (FStatus.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FStatus);
      }
      if (delayCode_ != null) {
        _single_delayCode_codec.WriteTagAndValue(output, DelayCode);
      }
      if (delayCn_ != null) {
        _single_delayCn_codec.WriteTagAndValue(output, DelayCn);
      }
      if (sflight_ != null) {
        _single_sflight_codec.WriteTagAndValue(output, Sflight);
      }
      if (stand_ != null) {
        _single_stand_codec.WriteTagAndValue(output, Stand);
      }
      if (gate_ != null) {
        _single_gate_codec.WriteTagAndValue(output, Gate);
      }
      if (car_ != null) {
        _single_car_codec.WriteTagAndValue(output, Car);
      }
      if (mp1_ != null) {
        _single_mp1_codec.WriteTagAndValue(output, Mp1);
      }
      if (cid_ != null) {
        _single_cid_codec.WriteTagAndValue(output, Cid);
      }
      if (cld_ != null) {
        _single_cld_codec.WriteTagAndValue(output, Cld);
      }
      if (cea_ != null) {
        _single_cea_codec.WriteTagAndValue(output, Cea);
      }
      if (vl_ != null) {
        _single_vl_codec.WriteTagAndValue(output, Vl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fid);
      }
      if (IsArrive != false) {
        size += 1 + 1;
      }
      if (FNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FNo);
      }
      if (FDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FDate);
      }
      if (aNo_ != null) {
        size += _single_aNo_codec.CalculateSizeWithTag(ANo);
      }
      if (Dep.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dep);
      }
      if (Arr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arr);
      }
      if (Std != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Std);
      }
      if (Sta != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sta);
      }
      if (etd_ != null) {
        size += _single_etd_codec.CalculateSizeWithTag(Etd);
      }
      if (eta_ != null) {
        size += _single_eta_codec.CalculateSizeWithTag(Eta);
      }
      if (atd_ != null) {
        size += _single_atd_codec.CalculateSizeWithTag(Atd);
      }
      if (ata_ != null) {
        size += _single_ata_codec.CalculateSizeWithTag(Ata);
      }
      if (fMode_ != null) {
        size += _single_fMode_codec.CalculateSizeWithTag(FMode);
      }
      if (AlIata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlIata);
      }
      if (AlIcao.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlIcao);
      }
      if (Cla.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Cla);
      }
      if (FStatus.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FStatus);
      }
      if (delayCode_ != null) {
        size += _single_delayCode_codec.CalculateSizeWithTag(DelayCode);
      }
      if (delayCn_ != null) {
        size += _single_delayCn_codec.CalculateSizeWithTag(DelayCn);
      }
      if (sflight_ != null) {
        size += _single_sflight_codec.CalculateSizeWithTag(Sflight);
      }
      if (stand_ != null) {
        size += _single_stand_codec.CalculateSizeWithTag(Stand);
      }
      if (gate_ != null) {
        size += _single_gate_codec.CalculateSizeWithTag(Gate);
      }
      if (car_ != null) {
        size += _single_car_codec.CalculateSizeWithTag(Car);
      }
      if (mp1_ != null) {
        size += _single_mp1_codec.CalculateSizeWithTag(Mp1);
      }
      if (cid_ != null) {
        size += _single_cid_codec.CalculateSizeWithTag(Cid);
      }
      if (cld_ != null) {
        size += _single_cld_codec.CalculateSizeWithTag(Cld);
      }
      if (cea_ != null) {
        size += _single_cea_codec.CalculateSizeWithTag(Cea);
      }
      if (vl_ != null) {
        size += _single_vl_codec.CalculateSizeWithTag(Vl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightInfo other) {
      if (other == null) {
        return;
      }
      if (other.Fid.Length != 0) {
        Fid = other.Fid;
      }
      if (other.IsArrive != false) {
        IsArrive = other.IsArrive;
      }
      if (other.FNo.Length != 0) {
        FNo = other.FNo;
      }
      if (other.FDate != 0L) {
        FDate = other.FDate;
      }
      if (other.aNo_ != null) {
        if (aNo_ == null || other.ANo != "") {
          ANo = other.ANo;
        }
      }
      if (other.Dep.Length != 0) {
        Dep = other.Dep;
      }
      if (other.Arr.Length != 0) {
        Arr = other.Arr;
      }
      if (other.Std != 0L) {
        Std = other.Std;
      }
      if (other.Sta != 0L) {
        Sta = other.Sta;
      }
      if (other.etd_ != null) {
        if (etd_ == null || other.Etd != 0L) {
          Etd = other.Etd;
        }
      }
      if (other.eta_ != null) {
        if (eta_ == null || other.Eta != 0L) {
          Eta = other.Eta;
        }
      }
      if (other.atd_ != null) {
        if (atd_ == null || other.Atd != 0L) {
          Atd = other.Atd;
        }
      }
      if (other.ata_ != null) {
        if (ata_ == null || other.Ata != 0L) {
          Ata = other.Ata;
        }
      }
      if (other.fMode_ != null) {
        if (fMode_ == null || other.FMode != "") {
          FMode = other.FMode;
        }
      }
      if (other.AlIata.Length != 0) {
        AlIata = other.AlIata;
      }
      if (other.AlIcao.Length != 0) {
        AlIcao = other.AlIcao;
      }
      if (other.Cla.Length != 0) {
        Cla = other.Cla;
      }
      if (other.FStatus.Length != 0) {
        FStatus = other.FStatus;
      }
      if (other.delayCode_ != null) {
        if (delayCode_ == null || other.DelayCode != "") {
          DelayCode = other.DelayCode;
        }
      }
      if (other.delayCn_ != null) {
        if (delayCn_ == null || other.DelayCn != "") {
          DelayCn = other.DelayCn;
        }
      }
      if (other.sflight_ != null) {
        if (sflight_ == null || other.Sflight != "") {
          Sflight = other.Sflight;
        }
      }
      if (other.stand_ != null) {
        if (stand_ == null || other.Stand != "") {
          Stand = other.Stand;
        }
      }
      if (other.gate_ != null) {
        if (gate_ == null || other.Gate != "") {
          Gate = other.Gate;
        }
      }
      if (other.car_ != null) {
        if (car_ == null || other.Car != "") {
          Car = other.Car;
        }
      }
      if (other.mp1_ != null) {
        if (mp1_ == null || other.Mp1 != "") {
          Mp1 = other.Mp1;
        }
      }
      if (other.cid_ != null) {
        if (cid_ == null || other.Cid != "") {
          Cid = other.Cid;
        }
      }
      if (other.cld_ != null) {
        if (cld_ == null || other.Cld != "") {
          Cld = other.Cld;
        }
      }
      if (other.cea_ != null) {
        if (cea_ == null || other.Cea != "") {
          Cea = other.Cea;
        }
      }
      if (other.vl_ != null) {
        if (vl_ == null || other.Vl != "") {
          Vl = other.Vl;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Fid = input.ReadString();
            break;
          }
          case 16: {
            IsArrive = input.ReadBool();
            break;
          }
          case 26: {
            FNo = input.ReadString();
            break;
          }
          case 32: {
            FDate = input.ReadInt64();
            break;
          }
          case 42: {
            string value = _single_aNo_codec.Read(input);
            if (aNo_ == null || value != "") {
              ANo = value;
            }
            break;
          }
          case 50: {
            Dep = input.ReadString();
            break;
          }
          case 58: {
            Arr = input.ReadString();
            break;
          }
          case 64: {
            Std = input.ReadInt64();
            break;
          }
          case 72: {
            Sta = input.ReadInt64();
            break;
          }
          case 82: {
            long? value = _single_etd_codec.Read(input);
            if (etd_ == null || value != 0L) {
              Etd = value;
            }
            break;
          }
          case 90: {
            long? value = _single_eta_codec.Read(input);
            if (eta_ == null || value != 0L) {
              Eta = value;
            }
            break;
          }
          case 98: {
            long? value = _single_atd_codec.Read(input);
            if (atd_ == null || value != 0L) {
              Atd = value;
            }
            break;
          }
          case 106: {
            long? value = _single_ata_codec.Read(input);
            if (ata_ == null || value != 0L) {
              Ata = value;
            }
            break;
          }
          case 114: {
            string value = _single_fMode_codec.Read(input);
            if (fMode_ == null || value != "") {
              FMode = value;
            }
            break;
          }
          case 122: {
            AlIata = input.ReadString();
            break;
          }
          case 130: {
            AlIcao = input.ReadString();
            break;
          }
          case 138: {
            Cla = input.ReadString();
            break;
          }
          case 146: {
            FStatus = input.ReadString();
            break;
          }
          case 154: {
            string value = _single_delayCode_codec.Read(input);
            if (delayCode_ == null || value != "") {
              DelayCode = value;
            }
            break;
          }
          case 162: {
            string value = _single_delayCn_codec.Read(input);
            if (delayCn_ == null || value != "") {
              DelayCn = value;
            }
            break;
          }
          case 170: {
            string value = _single_sflight_codec.Read(input);
            if (sflight_ == null || value != "") {
              Sflight = value;
            }
            break;
          }
          case 178: {
            string value = _single_stand_codec.Read(input);
            if (stand_ == null || value != "") {
              Stand = value;
            }
            break;
          }
          case 186: {
            string value = _single_gate_codec.Read(input);
            if (gate_ == null || value != "") {
              Gate = value;
            }
            break;
          }
          case 194: {
            string value = _single_car_codec.Read(input);
            if (car_ == null || value != "") {
              Car = value;
            }
            break;
          }
          case 202: {
            string value = _single_mp1_codec.Read(input);
            if (mp1_ == null || value != "") {
              Mp1 = value;
            }
            break;
          }
          case 210: {
            string value = _single_cid_codec.Read(input);
            if (cid_ == null || value != "") {
              Cid = value;
            }
            break;
          }
          case 218: {
            string value = _single_cld_codec.Read(input);
            if (cld_ == null || value != "") {
              Cld = value;
            }
            break;
          }
          case 226: {
            string value = _single_cea_codec.Read(input);
            if (cea_ == null || value != "") {
              Cea = value;
            }
            break;
          }
          case 234: {
            string value = _single_vl_codec.Read(input);
            if (vl_ == null || value != "") {
              Vl = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class Nothing : pb::IMessage<Nothing> {
    private static readonly pb::MessageParser<Nothing> _parser = new pb::MessageParser<Nothing>(() => new Nothing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nothing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Variflight.Fidstest.Flight.FlightInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nothing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nothing(Nothing other) : this() {
      test_ = other.test_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nothing Clone() {
      return new Nothing(this);
    }

    /// <summary>Field number for the "test" field.</summary>
    public const int TestFieldNumber = 1;
    private string test_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Test {
      get { return test_; }
      set {
        test_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nothing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nothing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Test != other.Test) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Test.Length != 0) hash ^= Test.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Test.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Test);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Test.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Test);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nothing other) {
      if (other == null) {
        return;
      }
      if (other.Test.Length != 0) {
        Test = other.Test;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Test = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FlightList : pb::IMessage<FlightList> {
    private static readonly pb::MessageParser<FlightList> _parser = new pb::MessageParser<FlightList>(() => new FlightList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlightList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Variflight.Fidstest.Flight.FlightInfoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightList(FlightList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlightList Clone() {
      return new FlightList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Com.Variflight.Fidstest.Flight.FlightInfo>.Codec _map_value_codec
        = new pbc::MapField<string, global::Com.Variflight.Fidstest.Flight.FlightInfo>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Com.Variflight.Fidstest.Flight.FlightInfo.Parser), 10);
    private readonly pbc::MapField<string, global::Com.Variflight.Fidstest.Flight.FlightInfo> value_ = new pbc::MapField<string, global::Com.Variflight.Fidstest.Flight.FlightInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Com.Variflight.Fidstest.Flight.FlightInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlightList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlightList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlightList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
